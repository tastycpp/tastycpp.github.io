<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory Management Library on C&#43;&#43; Land</title>
    <link>https://tastycpp.com/mem/</link>
    <description>Recent content in Memory Management Library on C&#43;&#43; Land</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>oleksandr@gituliar.net (Oleksandr Gituliar)</managingEditor>
    <webMaster>oleksandr@gituliar.net (Oleksandr Gituliar)</webMaster>
    <atom:link href="https://tastycpp.com/mem/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>unique_ptr</title>
      <link>https://tastycpp.com/mem/unique_ptr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/mem/unique_ptr/</guid>
      <description>std::unique_ptr A unique pointer is an object that owns another object through a pointer. The object is destroyed when the unique pointer is destroyed (e.g., when leaving a block scope).&#xA;Examples show/hide&#xA;Implementation std::unique_ptr is &amp;hellip;&#xA;1template&amp;lt;typename T&amp;gt; 2class uniqur_ptr { 3private: 4 T* xxx; 5} Size 16 bytes (64-bit) 8 bytes (32-bit) Layout See Also Reference template&amp;lt;class T, class D = std::default_delete&amp;lt;T&amp;gt;&amp;gt;&#xA;class unique_ptr;&#xA;template&amp;lt;class T, class D&amp;gt;&#xA;class unique_ptr&amp;lt;T[], D&amp;gt;;</description>
    </item>
    <item>
      <title>shared_ptr</title>
      <link>https://tastycpp.com/mem/shared_ptr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/mem/shared_ptr/</guid>
      <description>std::shared_ptr A shared pointer is an object that owns another object through a pointer, usually obtained via new. shared_ptr implements semantics of shared ownership; the last remaining owner of the pointer is responsible for destroying the object, or otherwise releasing the resources associated with the stored pointer.&#xA;Examples show/hide&#xA;Implementation std::unique_ptr is &amp;hellip;&#xA;1template&amp;lt;typename T&amp;gt; 2class shared_ptr { 3private: 4 T* xxx; 5} Size n bytes (64-bit) n/2 bytes (32-bit) Layout See Also Reference template&amp;lt;class T&amp;gt;</description>
    </item>
    <item>
      <title>weak_ptr</title>
      <link>https://tastycpp.com/mem/weak_ptr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/mem/weak_ptr/</guid>
      <description>std::weak_ptr The weak_ptr class template stores a weak reference to an object that is already managed by a shared_ptr.&#xA;Examples show/hide&#xA;Implementation std::unique_ptr is &amp;hellip;&#xA;1template&amp;lt;typename T&amp;gt; 2class weak_ptr { 3private: 4 T* xxx; 5} Size n bytes (64-bit) n/2 bytes (32-bit) Layout See Also Reference construct unique_ptr () noexcept&#xA;unique_ptr (pointer p) noexcept&#xA;unique_ptr (const unique_ptr&amp;amp;) = delete&#xA;Disable construction from lvalue.&#xA;unique_ptr (unique_ptr&amp;amp;&amp;amp; u) noexcept&#xA;unique_ptr (nullptr_t) noexcept</description>
    </item>
    <item>
      <title>Reference</title>
      <link>https://tastycpp.com/mem/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/mem/c/</guid>
      <description>Memory Functions #include &amp;lt;cstdlib&amp;gt;&#xA;The header &amp;lt;memory&amp;gt; defines several types and function templates that describe properties of pointers and pointer-like types, manage memory for containers and other template types, destroy objects, and construct objects in uninitialized memory buffers (20.2.3â€“20.2.11 and 27.11). The header also defines the templates unique_ptr, shared_ptr, weak_ptr, out_ptr_t, inout_ptr_t, and various function templates that operate on objects of these types (20.3).&#xA;create aligned_alloc (size_t alignment, size_t size) -&amp;gt; void*</description>
    </item>
  </channel>
</rss>
