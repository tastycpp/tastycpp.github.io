<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Containers Library on C&#43;&#43; Land</title>
    <link>https://tastycpp.com/containers/</link>
    <description>Recent content in Containers Library on C&#43;&#43; Land</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>oleksandr@gituliar.net (Oleksandr Gituliar)</managingEditor>
    <webMaster>oleksandr@gituliar.net (Oleksandr Gituliar)</webMaster>
    <atom:link href="https://tastycpp.com/containers/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>array</title>
      <link>https://tastycpp.com/containers/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/array/</guid>
      <description></description>
    </item>
    <item>
      <title>deque</title>
      <link>https://tastycpp.com/containers/deque/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/deque/</guid>
      <description></description>
    </item>
    <item>
      <title>flat_map</title>
      <link>https://tastycpp.com/containers/flat_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/flat_map/</guid>
      <description></description>
    </item>
    <item>
      <title>flat_set</title>
      <link>https://tastycpp.com/containers/flat_set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/flat_set/</guid>
      <description></description>
    </item>
    <item>
      <title>forward_list</title>
      <link>https://tastycpp.com/containers/forward_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/forward_list/</guid>
      <description></description>
    </item>
    <item>
      <title>list</title>
      <link>https://tastycpp.com/containers/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/list/</guid>
      <description></description>
    </item>
    <item>
      <title>map</title>
      <link>https://tastycpp.com/containers/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/map/</guid>
      <description>std::map Methods construct / copy map operator= iterators begin / end cbegin / cend rbegin / rend crbegin / crend capacity empty max_size size access at operator[] modifiers clear emplace emplace_hint erase extract insert insert_or_assign merge try_emplace swap map operations contains count equal_range find map lower_bound upper_bound observers key_comp value_comp Implementation Size Layout Reference Examples </description>
    </item>
    <item>
      <title>mdspan</title>
      <link>https://tastycpp.com/containers/mdspan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/mdspan/</guid>
      <description></description>
    </item>
    <item>
      <title>queue</title>
      <link>https://tastycpp.com/containers/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/queue/</guid>
      <description></description>
    </item>
    <item>
      <title>set</title>
      <link>https://tastycpp.com/containers/set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/set/</guid>
      <description>std::set The std::set container in C++ is a sorted associative container that stores unique elements. Internally, it is typically implemented as a balanced binary tree (usually a Red-Black Tree). The memory layout of std::set is similar to that of std::map, but since std::set only stores keys (without associated values), its node structure is simpler.&#xA;Methods operations complexity Implementation std::set is implemented as a red-black tree &amp;ndash; a balanced binary tree.</description>
    </item>
    <item>
      <title>span</title>
      <link>https://tastycpp.com/containers/span/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/span/</guid>
      <description></description>
    </item>
    <item>
      <title>stack</title>
      <link>https://tastycpp.com/containers/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/stack/</guid>
      <description></description>
    </item>
    <item>
      <title>unordered_map</title>
      <link>https://tastycpp.com/containers/unordered_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/unordered_map/</guid>
      <description>std::unordered_map Methods construct / copy unordered_map operator= iterators begin / end cbegin / cend capacity empty max_size size modifiers clear emplace emplace_hint erase extract insert insert_or_assign merge try_emplace swap observers hash_function key_eq map operations contains count equal_range find element access at operator[] bucket interface bucket_count max_bucket_count bucket_size bucket begin / end cbegin / cend hash policy load_factor max_load_factor rehash reserve Implementation Size Layout Reference Examples </description>
    </item>
    <item>
      <title>unordered_multimap</title>
      <link>https://tastycpp.com/containers/unordered_multimap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/unordered_multimap/</guid>
      <description></description>
    </item>
    <item>
      <title>unordered_multiset</title>
      <link>https://tastycpp.com/containers/unordered_multiset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/unordered_multiset/</guid>
      <description></description>
    </item>
    <item>
      <title>unordered_set</title>
      <link>https://tastycpp.com/containers/unordered_set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/unordered_set/</guid>
      <description></description>
    </item>
    <item>
      <title>vector</title>
      <link>https://tastycpp.com/containers/vector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>oleksandr@gituliar.net (Oleksandr Gituliar)</author>
      <guid>https://tastycpp.com/containers/vector/</guid>
      <description>std::vector A vector is a sequence container that supports (amortized) constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage management is handled automatically, though hints can be given to improve efficiency.&#xA;Examples show/hide&#xA;Implementation 1template&amp;lt;typename T&amp;gt; 2class vector { 3 T* myFirst; 4 T* myLast; 5 T* myEnd; 6} myFirst - pointer to the first element (if the vector is not empty).</description>
    </item>
  </channel>
</rss>
